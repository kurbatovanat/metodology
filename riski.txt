Практическое задание №2

Необходимо создать план усправлением и оценку рисков.

• Идентифицируйте потенциальные риски проекта.

• Разработайте стратегии и планы для их управления.

• Включите планы смягчения и реагирования на риски.

Управление рисками не гарантирует на 100% успешного завершения проекта, но дает некоторый резерв в случае форс-мажорных ситуаций.

1. Внутренние сложности календарного планирования
Резерв времени на случай ошибок планирования и возникновения непредвиденных обстоятельств -  +30% (большой срок может отпугнуть заказчика). Привлекать программистов к оценке сроков.

2. Увеличение требогний со стороны заказчика в ходе реализации проекта.
Проводить согласование требований с заказчиком на каждом этапе проектирования и реализации проекта.
Добавить 2 дня времени на удовлетворение новых пожеланий заказчика.
Вновь появившиеся требования заказчика перенести в следующую версию программного продукта, если возможно..

3. Утечка кадров.
Для обеспечения взаимозаменяемости сотрудников не только на случай увольнения, но и в период комментарии для каждой подпрограммы, основные функции и назначения параметров, "говорящие идентификаторы", структурирование текста программы и т.д. Через день организовывать совещания для обсуждения очередного выполняемого этапа  работы.
Совместно с разработчиком определить оптимальные для него условия труда: в учреждении или дома, рабочее время, режим отчётности и т.д.

4. Нарушение спецификаций. 
Возвращаться к согласованию требований с заказчиком на каждом этапе разработки. По возможности показывать заказчику реализованные фрагменты, особенно пользовательский интерфейс. В небольшом проекте нет возможности отдельно привлекать посредника для проверки спецификации. К такой проверке можно привлекать тестировщика

5. Низкая производительность.
Разбить задачу на короткие этапы и вести полную отчётность по каждому из них с контролем соблюдения сроков.
При возникновении тупиковой ситуации с написанием кода или отладкой бывает полезно создать условия для краткосрочного переключения внимания, например, экскурсия в музей и т.п.

6. Низкая квалификация специалиста по разработке. Это может стать причиной низкой производительности. Входной контроль. На обучение в таком маленьком проекте нет ни времени, ни денег. Выделения более мелких этапов реализации программы с тщательным разъяснением каждого этапа.  крайнем случае, привлечение другого программиста.

7. Сезонные заболевания.
Закладывать больше я сроки для выполнения заказа. Допускать удалённую работу сотрудников. А также в реанимацию указанные выше меры по взаимозаменяемости сотрудников.

8. Поломки оборудования.
Устанавливать на все компьютеры идентичное ПО для обеспечения их  взаимозаменяемости. С каждого заказа накапливать резервный фонд для экстренного ремонта компьютеров и смартфонов или или приобретения. 
Регулярно делать резервные копии всех материалов по разработке и хранить их на независимом ресурсе.

Источник

5 главных рисков при заказной разработке ПО
https://habr.com/ru/articles/271937/